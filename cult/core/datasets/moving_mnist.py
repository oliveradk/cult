# AUTOGENERATED! DO NOT EDIT! File to edit: 01a_core.datasets.moving_mnist.ipynb (unless otherwise specified).

__all__ = ['CommonMNIST', 'CommonFashionMNIST', 'MovingMNIST', 'MovingFashionMNIST', 'FixedMNIST']

# Cell
import os
import numpy as np
import torch
from torchvision.datasets import MNIST, FashionMNIST
from torchvision.transforms import ToTensor
from PIL import Image

from vase.config import DATA_PATH

# Cell
class CommonMNIST(MNIST):
    """MNIST where data path is fixed"""

    FOLDER_NAME = "MNIST"

    @property
    def raw_folder(self) -> str:
        return os.path.join(self.root, self.FOLDER_NAME, 'raw')

    @property
    def processed_folder(self) -> str:
        return os.path.join(self.root, self.FOLDER_NAME, 'processed')

# Cell
class CommonFashionMNIST(FashionMNIST):
    """FashionMNIST where data path is fixed"""

    FOLDER_NAME = "FashionMNIST"

    @property
    def raw_folder(self) -> str:
        return os.path.join(self.root, self.FOLDER_NAME, 'raw')

    @property
    def processed_folder(self) -> str:
        return os.path.join(self.root, self.FOLDER_NAME, 'processed')

# Cell
class MovingMNIST(CommonMNIST):
    """Moving MNIST, with MNIST digits randomly projected onto 64x64 black background"""

    def __getitem__(self, index):
        """
        Args:
            index (int): Index

        Returns:
            tuple: (image, target, location) where target is index of the target class, location is the (x,y) coordinate of the top left corner
        """
        img, target = self.data[index], int(self.targets[index])


        #sample x, y location in 36x36 grid
        pos = torch.randint(0, 36, (2,))

        #paste image
        background = Image.new('L', (64, 64))
        img = Image.fromarray(img.numpy(), mode="L")
        background.paste(img, pos.numpy().tolist())
        img = background

        if self.transform is not None:
            img = self.transform(img)

        if self.target_transform is not None:
            target = self.target_transform(target)

        return img, target, pos

# Cell
class MovingFashionMNIST(CommonFashionMNIST):
    """Moving MNIST, with MNIST digits randomly projected onto 64x64 black background"""

    def __getitem__(self, index):
        """
        Args:
            index (int): Index

        Returns:
            tuple: (image, target, location) where target is index of the target class, location is the (x,y) coordinate of the top left corner
        """
        img, target = self.data[index], int(self.targets[index])


        #sample x, y location in 36x36 grid
        pos = torch.randint(0, 36, (2,))

        #paste image
        background = Image.new('L', (64, 64))
        img = Image.fromarray(img.numpy(), mode="L")
        background.paste(img, pos.numpy().tolist())
        img = background

        if self.transform is not None:
            img = self.transform(img)

        if self.target_transform is not None:
            target = self.target_transform(target)

        return img, target, pos

# Cell
class FixedMNIST(CommonMNIST):
    def __getitem__(self, index):
        """
        Args:
            index (int): Index

        Returns:
            tuple: (image, target, location) where target is index of the target class, location is the (x,y) coordinate of the top left corner
        """
        img, target = self.data[index], int(self.targets[index])


        #sample x, y location in 36x36 grid
        pos = torch.tensor([18, 18], dtype=torch.int64)

        #paste image
        background = Image.new('L', (64, 64))
        img = Image.fromarray(img.numpy(), mode="L")
        background.paste(img, pos.numpy().tolist())
        img = background

        if self.transform is not None:
            img = self.transform(img)

        if self.target_transform is not None:
            target = self.target_transform(target)

        return img, target, pos
